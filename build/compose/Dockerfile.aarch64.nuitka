ARG DOCKER_VERSION=19.03.8

FROM arm64v8/docker:${DOCKER_VERSION} AS docker-cli

FROM ghcr.io/linuxserver/baseimage-ubuntu:arm64v8-bionic AS build

ARG COMPOSE_VERSION=1.27.4

RUN apt-get update && apt-get install --no-install-recommends -y \
    curl \
    gcc \
    git \
    libc-dev \
    libffi-dev \
    libgcc-6-dev \
    libssl-dev \
    make \
    openssl \
    python3-dev \
    python3-pip \
    zlib1g-dev

COPY --from=docker-cli /usr/local/bin/docker /usr/local/bin/docker
RUN apt-get install --no-install-recommends -y unzip python3-setuptools
RUN curl -fsSL https://github.com/docker/compose/archive/$COMPOSE_VERSION.zip > $COMPOSE_VERSION.zip \
    && unzip $COMPOSE_VERSION.zip
RUN cd compose-$COMPOSE_VERSION
WORKDIR /compose-$COMPOSE_VERSION
RUN pip3 install virtualenv==20.0.30
RUN  pip3 install tox==3.19.0
RUN pip3 install wheel
RUN pip3 install scons staticx 

# RUN PY_ARG=$(printf "$(python3 -V)" | awk '{print $2}' | awk 'BEGIN{FS=OFS="."} NF--' | sed 's|\.||g' | sed 's|^|py|g') && \
#  sed -i "s|envlist = .*|envlist = ${PY_ARG},pre-commit|g" tox.ini && \
#  tox --notest && \
#  mkdir -p dist && \
#  chmod 777 dist
# RUN  /compose-$COMPOSE_VERSION/.tox/${PY_ARG}/bin/pip3 install -q -r requirements-build.txt && \
#  echo "$(script/build/write-git-sha)" > compose/GITSHA && \
#  export PATH="/compose-$COMPOSE_VERSION/pyinstaller:${PATH}"
RUN  pip3 install -q -r requirements-build.txt && \
 echo "$(script/build/write-git-sha)" > compose/GITSHA && \
 export PATH="/compose-$COMPOSE_VERSION/pyinstaller:${PATH}"
RUN pip3 install docker nuitka
RUN pip3 install distro python-dotenv pyyaml cached-property jsonschema docopt texttable dockerpty

# RUN  pyinstaller -F --debug all --exclude-module pycrypto --exclude-module PyInstaller docker-compose.spec
RUN python3 -m nuitka --follow-imports --standalone setup.py


RUN  ls -la dist/ && \
 ldd dist/docker-compose
# RUN apt-get install -y --no-install-recommends patchelf
RUN mkdir /dist
# RUN  staticx --debug dist/docker-compose  /dist/docker-compose && \
#  mv dist/docker-compose /usr/local/bin && \
#  docker-compose version


RUN mv /compose-$COMPOSE_VERSION/docker-compose-entrypoint.sh /usr/local/bin/docker-compose-entrypoint.sh
RUN mv /dist/docker-compose /usr/local/bin/docker-compose
ENTRYPOINT ["sh", "/usr/local/bin/docker-compose-entrypoint.sh"]